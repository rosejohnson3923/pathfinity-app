-- Migration 058: Create Career Match Tables
-- Game: Career Match (Memory Matching Game)
-- Category: QuickPlay (Discovered Live Arcade)
-- Created: 2025-10-24

-- ============================================================================
-- TABLE: cm_rooms (Career Match Rooms)
-- ============================================================================
CREATE TABLE IF NOT EXISTS cm_rooms (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  room_code VARCHAR(6) UNIQUE NOT NULL,
  host_user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  difficulty VARCHAR(10) NOT NULL CHECK (difficulty IN ('easy', 'medium', 'hard')),
  max_players INTEGER DEFAULT 6 CHECK (max_players >= 2 AND max_players <= 8),
  current_player_count INTEGER DEFAULT 0,
  status VARCHAR(20) DEFAULT 'waiting' CHECK (status IN ('waiting', 'active', 'completed', 'cancelled')),

  -- Game configuration
  grid_size INTEGER NOT NULL, -- 12, 20, or 30 cards
  time_limit_seconds INTEGER, -- NULL = no limit, or 300, 480, etc.

  -- Game state
  current_turn_player_id UUID, -- References cm_players.id
  cards_matched INTEGER DEFAULT 0,
  total_pairs INTEGER NOT NULL,
  game_data JSONB, -- Additional game state (revealed cards, etc.)

  -- Timestamps
  created_at TIMESTAMPTZ DEFAULT NOW(),
  started_at TIMESTAMPTZ,
  ended_at TIMESTAMPTZ,

  -- Metadata
  winner_user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  total_turns INTEGER DEFAULT 0
);

-- Index for finding available rooms
CREATE INDEX idx_cm_rooms_status ON cm_rooms(status) WHERE status IN ('waiting', 'active');
CREATE INDEX idx_cm_rooms_code ON cm_rooms(room_code);
CREATE INDEX idx_cm_rooms_host ON cm_rooms(host_user_id);

COMMENT ON TABLE cm_rooms IS 'Career Match game rooms (QuickPlay category)';
COMMENT ON COLUMN cm_rooms.grid_size IS 'Total number of cards (12/20/30 based on difficulty)';
COMMENT ON COLUMN cm_rooms.game_data IS 'JSONB containing game state (revealed positions, etc.)';

-- ============================================================================
-- TABLE: cm_players (Career Match Players)
-- ============================================================================
CREATE TABLE IF NOT EXISTS cm_players (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  room_id UUID NOT NULL REFERENCES cm_rooms(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  display_name VARCHAR(100) NOT NULL,

  -- Player type
  is_ai_player BOOLEAN DEFAULT FALSE,
  ai_player_id UUID, -- Generated by AIPlayerPoolService (in-memory, no table)
  ai_difficulty VARCHAR(10), -- 'easy', 'medium', 'hard' for AI memory accuracy

  -- Turn order
  turn_order INTEGER NOT NULL,
  is_active_turn BOOLEAN DEFAULT FALSE,

  -- Game stats
  matches_found INTEGER DEFAULT 0,
  misses INTEGER DEFAULT 0, -- Number of failed match attempts
  consecutive_matches INTEGER DEFAULT 0, -- Current streak
  longest_streak INTEGER DEFAULT 0, -- Best streak this game

  -- XP and scoring
  arcade_xp_earned INTEGER DEFAULT 0,

  -- Timestamps
  joined_at TIMESTAMPTZ DEFAULT NOW(),
  last_action_at TIMESTAMPTZ,

  -- Constraints
  UNIQUE(room_id, turn_order),
  CHECK (turn_order >= 1 AND turn_order <= 8)
);

-- Indexes for player lookups
CREATE INDEX idx_cm_players_room ON cm_players(room_id);
CREATE INDEX idx_cm_players_user ON cm_players(user_id);
CREATE INDEX idx_cm_players_turn ON cm_players(room_id, turn_order);
CREATE INDEX idx_cm_players_active_turn ON cm_players(room_id, is_active_turn) WHERE is_active_turn = TRUE;

COMMENT ON TABLE cm_players IS 'Players in Career Match games (human and AI)';
COMMENT ON COLUMN cm_players.consecutive_matches IS 'Current match streak (resets on miss)';
COMMENT ON COLUMN cm_players.longest_streak IS 'Best consecutive match streak this game';

-- ============================================================================
-- TABLE: cm_cards (Career Match Cards)
-- ============================================================================
CREATE TABLE IF NOT EXISTS cm_cards (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  room_id UUID NOT NULL REFERENCES cm_rooms(id) ON DELETE CASCADE,

  -- Card position and identity
  position INTEGER NOT NULL CHECK (position >= 0), -- 0-indexed grid position
  career_name VARCHAR(100) NOT NULL,
  career_image_path TEXT NOT NULL,
  pair_id INTEGER NOT NULL, -- Links matching cards (e.g., both cards in pair have pair_id=1)

  -- Card state
  is_revealed BOOLEAN DEFAULT FALSE, -- Currently face-up
  is_matched BOOLEAN DEFAULT FALSE, -- Permanently matched
  matched_by_player_id UUID REFERENCES cm_players(id) ON DELETE SET NULL,
  matched_at TIMESTAMPTZ,

  -- Constraints
  UNIQUE(room_id, position),
  CHECK (position < 30) -- Max grid size is 30 cards
);

-- Indexes for card lookups
CREATE INDEX idx_cm_cards_room ON cm_cards(room_id);
CREATE INDEX idx_cm_cards_position ON cm_cards(room_id, position);
CREATE INDEX idx_cm_cards_matched ON cm_cards(room_id, is_matched);

COMMENT ON TABLE cm_cards IS 'Card positions and states for Career Match games';
COMMENT ON COLUMN cm_cards.pair_id IS 'Identifies matching pairs (0-14 for hard mode)';
COMMENT ON COLUMN cm_cards.is_revealed IS 'Temporarily face-up (during turn)';
COMMENT ON COLUMN cm_cards.is_matched IS 'Permanently matched (stays face-up)';

-- ============================================================================
-- TABLE: cm_moves (Career Match Moves History)
-- ============================================================================
CREATE TABLE IF NOT EXISTS cm_moves (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  room_id UUID NOT NULL REFERENCES cm_rooms(id) ON DELETE CASCADE,
  player_id UUID NOT NULL REFERENCES cm_players(id) ON DELETE CASCADE,
  turn_number INTEGER NOT NULL,

  -- Move details
  card_1_position INTEGER NOT NULL,
  card_2_position INTEGER NOT NULL,
  card_1_career VARCHAR(100) NOT NULL,
  card_2_career VARCHAR(100) NOT NULL,
  is_match BOOLEAN NOT NULL,

  -- Timing
  time_taken_ms INTEGER, -- How long player took to complete turn
  created_at TIMESTAMPTZ DEFAULT NOW(),

  -- Constraints
  CHECK (card_1_position <> card_2_position),
  CHECK (card_1_position >= 0 AND card_1_position < 30),
  CHECK (card_2_position >= 0 AND card_2_position < 30)
);

-- Indexes for move history
CREATE INDEX idx_cm_moves_room ON cm_moves(room_id);
CREATE INDEX idx_cm_moves_player ON cm_moves(player_id);
CREATE INDEX idx_cm_moves_turn ON cm_moves(room_id, turn_number);

COMMENT ON TABLE cm_moves IS 'Complete move history for Career Match games';
COMMENT ON COLUMN cm_moves.time_taken_ms IS 'Milliseconds from turn start to second card flip';

-- ============================================================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- ============================================================================

-- Enable RLS on all tables
ALTER TABLE cm_rooms ENABLE ROW LEVEL SECURITY;
ALTER TABLE cm_players ENABLE ROW LEVEL SECURITY;
ALTER TABLE cm_cards ENABLE ROW LEVEL SECURITY;
ALTER TABLE cm_moves ENABLE ROW LEVEL SECURITY;

-- cm_rooms policies
CREATE POLICY "Anyone can view waiting/active rooms"
  ON cm_rooms FOR SELECT
  USING (status IN ('waiting', 'active'));

CREATE POLICY "Host can update their rooms"
  ON cm_rooms FOR UPDATE
  USING (auth.uid() = host_user_id);

CREATE POLICY "Authenticated users can create rooms"
  ON cm_rooms FOR INSERT
  WITH CHECK (auth.uid() = host_user_id);

-- cm_players policies
CREATE POLICY "Players can view players in their rooms"
  ON cm_players FOR SELECT
  USING (
    room_id IN (
      SELECT room_id FROM cm_players WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Players can join rooms"
  ON cm_players FOR INSERT
  WITH CHECK (auth.uid() = user_id OR is_ai_player = TRUE);

CREATE POLICY "Players can update their own data"
  ON cm_players FOR UPDATE
  USING (auth.uid() = user_id);

-- cm_cards policies
CREATE POLICY "Players can view cards in their rooms"
  ON cm_cards FOR SELECT
  USING (
    room_id IN (
      SELECT room_id FROM cm_players WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "System can manage cards"
  ON cm_cards FOR ALL
  USING (true)
  WITH CHECK (true);

-- cm_moves policies
CREATE POLICY "Players can view move history in their rooms"
  ON cm_moves FOR SELECT
  USING (
    room_id IN (
      SELECT room_id FROM cm_players WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Players can record their moves"
  ON cm_moves FOR INSERT
  WITH CHECK (
    player_id IN (
      SELECT id FROM cm_players WHERE user_id = auth.uid()
    )
  );

-- ============================================================================
-- FUNCTIONS
-- ============================================================================

-- Function: Generate unique 6-character room code
CREATE OR REPLACE FUNCTION cm_generate_room_code()
RETURNS VARCHAR(6) AS $$
DECLARE
  chars TEXT := 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789'; -- Exclude ambiguous chars (I, O, 1, 0)
  result VARCHAR(6) := '';
  i INTEGER;
BEGIN
  FOR i IN 1..6 LOOP
    result := result || substr(chars, floor(random() * length(chars) + 1)::int, 1);
  END LOOP;

  -- Check for collision
  IF EXISTS (SELECT 1 FROM cm_rooms WHERE room_code = result) THEN
    RETURN cm_generate_room_code(); -- Retry if collision
  END IF;

  RETURN result;
END;
$$ LANGUAGE plpgsql;

-- Function: Update player count when players join/leave
CREATE OR REPLACE FUNCTION cm_update_player_count()
RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    UPDATE cm_rooms
    SET current_player_count = (SELECT COUNT(*) FROM cm_players WHERE room_id = NEW.room_id)
    WHERE id = NEW.room_id;
  ELSIF TG_OP = 'DELETE' THEN
    UPDATE cm_rooms
    SET current_player_count = (SELECT COUNT(*) FROM cm_players WHERE room_id = OLD.room_id)
    WHERE id = OLD.room_id;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger: Update player count
CREATE TRIGGER cm_player_count_trigger
AFTER INSERT OR DELETE ON cm_players
FOR EACH ROW
EXECUTE FUNCTION cm_update_player_count();

-- Function: Initialize cards for a new game
CREATE OR REPLACE FUNCTION cm_initialize_cards(
  p_room_id UUID,
  p_difficulty VARCHAR(10)
)
RETURNS VOID AS $$
DECLARE
  v_grid_size INTEGER;
  v_career_images TEXT[][];
  v_shuffled_careers TEXT[][];
  v_shuffled_positions INTEGER[];
  v_career_data TEXT[];
  v_career_name TEXT;
  v_image_file TEXT;
  v_pair_id INTEGER;
  i INTEGER;
BEGIN
  -- Determine grid size based on difficulty
  v_grid_size := CASE p_difficulty
    WHEN 'easy' THEN 12
    WHEN 'medium' THEN 20
    WHEN 'hard' THEN 30
  END;

  -- All 50 available career roles with their exact image filenames
  -- Format: [career_name, image_filename]
  v_career_images := ARRAY[
    ARRAY['3D Artist', '35 3D Artist.png'],
    ARRAY['Accountant', '38 Accountant.png'],
    ARRAY['Auditor', '39 Auditor.png'],
    ARRAY['Broadcast Engineer', '15 Broadcast Engineer.png'],
    ARRAY['Business Developer', '32 Business Developer.png'],
    ARRAY['Cloud Security Engineer', '22 Cloud Security Engineer.png'],
    ARRAY['Community Manager', '11 Community Manager.png'],
    ARRAY['Content Creator', '2 Content Creator.png'],
    ARRAY['Customer Support', '34 Customer Support.png'],
    ARRAY['CyberSecurity Analyst', '16 CyberSecurity Analyst.png'],
    ARRAY['Equipment Manager', '36 Equipment Manager.png'],
    ARRAY['Esports Agent', '40 Esports Agent.png'],
    ARRAY['Esports Analyst', '17 Esports Analyst.png'],
    ARRAY['Esports Asst Coach', '27 Esports Asst Coach.png'],
    ARRAY['Esports Nutritionist', '24 Esports Nutritionist.png'],
    ARRAY['Event Manager', '25 Event Manager.png'],
    ARRAY['Facilities Manager', '19 Facilities Manager.png'],
    ARRAY['Financial Analyst', '37 Financial Analyst.png'],
    ARRAY['Fitness Coach', '44 Fitness Coach.png'],
    ARRAY['Game Designer', '3 Game Designer.png'],
    ARRAY['General Manager', '26 General Manager.png'],
    ARRAY['Graphic Designer', '12 Graphic Designer.png'],
    ARRAY['Head Chef', '13 Head Chef.png'],
    ARRAY['Head Coach', '10 Head Coach.png'],
    ARRAY['HR Manager', '28 HR Manager.png'],
    ARRAY['Influencer', '45 Influencer.png'],
    ARRAY['IT Coordinator', '18 IT Coordinator.png'],
    ARRAY['Journalist', '46 Journalist.png'],
    ARRAY['Lawyer', '47 Lawyer.png'],
    ARRAY['Lighting Tech', '31 Lighting Tech.png'],
    ARRAY['Performance Coach', '14 Performance Coach.png'],
    ARRAY['Photographer', '33 Photographer.png'],
    ARRAY['Production Manager', '41 Production Manager.png'],
    ARRAY['Product Manager', '20 Product Manager.png'],
    ARRAY['Program Manager', '42 Program Manager.png'],
    ARRAY['Project Manager', '43 Project Manager.png'],
    ARRAY['Psychologist', '4 Psychologist.png'],
    ARRAY['Public Relations Specialist', '48 Public Relations Specialist.png'],
    ARRAY['Scriptwriter', '49 Scriptwriter.png'],
    ARRAY['Social Media Manager', '5 Social Media Manager.png'],
    ARRAY['Software Engineer', '23 Software Engineer.png'],
    ARRAY['Sound Engineer', '29 Sound Engineer.png'],
    ARRAY['Sponsorship Coordinator', '50 Sponsorship Coordinator.png'],
    ARRAY['Talent Scout', '1 Talent Scout.png'],
    ARRAY['Team Captain', '6 Team Captain.png'],
    ARRAY['Team Manager', '7 Team Manager.png'],
    ARRAY['Tech Support', '21 Tech Support.png'],
    ARRAY['Travel Coordinator', '8 Travel Coordinator.png'],
    ARRAY['Treasurer', '9 Treasurer.png'],
    ARRAY['Videographer', '30 Videographer.png']
  ];

  -- Shuffle the careers array and take only what we need
  v_shuffled_careers := ARRAY(
    SELECT unnest(v_career_images) ORDER BY random() LIMIT (v_grid_size / 2)
  );

  -- Generate shuffled positions for the cards
  v_shuffled_positions := ARRAY(
    SELECT generate_series(0, v_grid_size - 1) ORDER BY random()
  );

  -- Create card pairs
  FOR i IN 0..(v_grid_size / 2 - 1) LOOP
    v_career_data := v_shuffled_careers[i + 1];
    v_career_name := v_career_data[1];
    v_image_file := v_career_data[2];
    v_pair_id := i;

    -- Insert first card of pair
    INSERT INTO cm_cards (
      room_id, position, career_name, career_image_path, pair_id
    ) VALUES (
      p_room_id,
      v_shuffled_positions[i * 2 + 1],
      v_career_name,
      '/assets/Discovered Live/Role - Landscape/' || v_image_file,
      v_pair_id
    );

    -- Insert second card of pair
    INSERT INTO cm_cards (
      room_id, position, career_name, career_image_path, pair_id
    ) VALUES (
      p_room_id,
      v_shuffled_positions[i * 2 + 2],
      v_career_name,
      '/assets/Discovered Live/Role - Landscape/' || v_image_file,
      v_pair_id
    );
  END LOOP;
END;
$$ LANGUAGE plpgsql;

-- ============================================================================
-- GRANT PERMISSIONS
-- ============================================================================

-- Grant access to authenticated users
GRANT SELECT, INSERT, UPDATE, DELETE ON cm_rooms TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON cm_players TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON cm_cards TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON cm_moves TO authenticated;

-- Grant access to service role (for backend operations)
GRANT ALL ON cm_rooms TO service_role;
GRANT ALL ON cm_players TO service_role;
GRANT ALL ON cm_cards TO service_role;
GRANT ALL ON cm_moves TO service_role;

-- Grant execute on functions
GRANT EXECUTE ON FUNCTION cm_generate_room_code() TO authenticated;
GRANT EXECUTE ON FUNCTION cm_initialize_cards(UUID, VARCHAR) TO authenticated;

-- ============================================================================
-- VERIFICATION QUERIES
-- ============================================================================

-- Verify tables were created
DO $$
BEGIN
  RAISE NOTICE 'Verifying Career Match tables...';

  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'cm_rooms') THEN
    RAISE NOTICE '✓ cm_rooms table created';
  END IF;

  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'cm_players') THEN
    RAISE NOTICE '✓ cm_players table created';
  END IF;

  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'cm_cards') THEN
    RAISE NOTICE '✓ cm_cards table created';
  END IF;

  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'cm_moves') THEN
    RAISE NOTICE '✓ cm_moves table created';
  END IF;

  RAISE NOTICE 'Career Match migration 058 completed successfully!';
END $$;
