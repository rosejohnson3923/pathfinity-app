# ================================================================
# PATHFINITY PRODUCTION DOCKER COMPOSE
# Complete production stack with AI services, database, and monitoring
# ================================================================

version: '3.8'

services:
  # ================================================================
  # Main Application
  # ================================================================
  pathfinity-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: pathfinity-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
      - REDIS_URL=redis://redis:6379
      - MONITORING_ENABLED=true
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - postgres-db
      - redis-cache
      - monitoring
    networks:
      - pathfinity-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================================================
  # Database
  # ================================================================
  postgres-db:
    image: postgres:15-alpine
    container_name: pathfinity-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema:/docker-entrypoint-initdb.d
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - pathfinity-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================================================
  # Redis Cache
  # ================================================================
  redis-cache:
    image: redis:7-alpine
    container_name: pathfinity-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pathfinity-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================================================
  # Load Balancer (Nginx)
  # ================================================================
  load-balancer:
    image: nginx:alpine
    container_name: pathfinity-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - pathfinity-app
    networks:
      - pathfinity-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================================================
  # Monitoring and Logging
  # ================================================================
  monitoring:
    image: prom/prometheus:latest
    container_name: pathfinity-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pathfinity-network

  grafana:
    image: grafana/grafana:latest
    container_name: pathfinity-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - monitoring
    networks:
      - pathfinity-network

  # ================================================================
  # Log Aggregation
  # ================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: pathfinity-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - pathfinity-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: pathfinity-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - pathfinity-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: pathfinity-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - pathfinity-network

  # ================================================================
  # Backup Service
  # ================================================================
  backup-service:
    image: postgres:15-alpine
    container_name: pathfinity-backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: sh -c "chmod +x /backup.sh && crond -f"
    depends_on:
      - postgres-db
    networks:
      - pathfinity-network

  # ================================================================
  # AI Content Generation Worker
  # ================================================================
  ai-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: pathfinity-ai-worker
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - REDIS_URL=redis://redis-cache:6379
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis-cache
      - postgres-db
    networks:
      - pathfinity-network

# ================================================================
# Volumes
# ================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# ================================================================
# Networks
# ================================================================
networks:
  pathfinity-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16